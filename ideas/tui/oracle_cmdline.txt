// cmdline.c
// Command line parsing implementation

#include "cmdline.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>

void print_usage(const char *prog) {
    printf("Usage: %s [OPTIONS]\n\n", prog);
    printf("Oracle: Les Champions d'Arcadie\n\n");
    printf("Options:\n");
    printf("  -h, --help              Show this help message\n");
    printf("  -v, --verbose           Enable verbose output\n");
    printf("  -V, --version           Show version information\n");
    printf("  -n, --numsim N          Set simulations to N (default: 1000)\n");
    printf("  -o, --output FILE       Output to FILE\n\n");
    printf("Game Modes:\n");
    printf("  -a, --stda.auto         Standalone automated (default)\n");
    printf("  -s, --stda.sim          Standalone simulation\n");
    printf("  -t, --stda.tui          Standalone TUI (ncurses)\n");
    printf("  -g, --stda.gui          Standalone GUI\n\n");
    printf("Examples:\n");
    printf("  %s -t                   Launch TUI mode\n", prog);
    printf("  %s -a -n 5000           Run 5000 simulations\n", prog);
    printf("  %s -v -o results.txt    Verbose with file output\n\n", 
           prog);
}

void print_version(void) {
    printf("Oracle: Les Champions d'Arcadie v%d.%02d%s\n",
           VERSION_YEAR, VERSION_MONTH, VERSION_SUFFIX);
    printf("Card game simulation and player interface\n");
}

int parse_options(int argc, char **argv, config_t *cfg) {
    int opt;
    int option_index = 0;
    
    static struct option long_options[] = {
        {"help",       no_argument,       0, 'h'},
        {"verbose",    no_argument,       0, 'v'},
        {"version",    no_argument,       0, 'V'},
        {"numsim",     required_argument, 0, 'n'},
        {"output",     required_argument, 0, 'o'},
        {"stda.auto",  no_argument,       0, 'a'},
        {"stda.sim",   no_argument,       0, 's'},
        {"stda.tui",   no_argument,       0, 't'},
        {"stda.gui",   no_argument,       0, 'g'},
        {0, 0, 0, 0}
    };
    
    // Initialize config with defaults
    memset(cfg, 0, sizeof(config_t));
    cfg->verbose = false;
    cfg->numsim = 1000;
    cfg->mode = MODE_STDA_AUTO; // Default mode
    
    while ((opt = getopt_long(argc, argv, "hvVn:o:astg",
            long_options, &option_index)) != -1) {
        switch (opt) {
            case 'h':
                print_usage(argv[0]);
                return -1;
            case 'v':
                cfg->verbose = true;
                break;
            case 'V':
                print_version();
                return -1;
            case 'n':
                cfg->numsim = atoi(optarg);
                if (cfg->numsim <= 0) {
                    fprintf(stderr, "Error: numsim must be positive\n");
                    return 1;
                }
                break;
            case 'o':
                cfg->output_file = strdup(optarg);
                break;
            case 'a':
                cfg->mode = MODE_STDA_AUTO;
                break;
            case 's':
                cfg->mode = MODE_STDA_SIM;
                break;
            case 't':
                cfg->mode = MODE_STDA_TUI;
                break;
            case 'g':
                cfg->mode = MODE_STDA_GUI;
                break;
            default:
                print_usage(argv[0]);
                return 1;
        }
    }
    
    return 0;
}
